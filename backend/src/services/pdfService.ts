import PDFDocument from 'pdfkit';

interface Proposal {
  title: string;
  objective: string;
  features: string[];
  targetAudience: string;
  considerations: string[];
}

export async function generatePDF(proposal: Proposal): Promise<Buffer> {
  return new Promise((resolve, reject) => {
    try {
      const doc = new PDFDocument({
        margin: 50,
        size: 'A4',
        info: {
          Title: proposal.title,
          Author: 'Project Scope Catalyst',
          CreationDate: new Date(),
        }
      });

      const buffers: Buffer[] = [];

      doc.on('data', (buffer) => buffers.push(buffer));
      doc.on('end', () => resolve(Buffer.concat(buffers)));
      doc.on('error', reject);

      // Header
      doc.fillColor('#4F46E5')
         .fontSize(20)
         .font('Helvetica-Bold')
         .text(proposal.title, { align: 'center' });
      
      doc.moveDown(0.5);
      doc.strokeColor('#E5E7EB')
         .lineWidth(1)
         .moveTo(50, doc.y)
         .lineTo(550, doc.y)
         .stroke();
      
      doc.moveDown();

      // Project Objective
      doc.fillColor('#1F2937')
         .fontSize(16)
         .font('Helvetica-Bold')
         .text('Project Objective');
      
      doc.moveDown(0.3);
      doc.fillColor('#374151')
         .fontSize(11)
         .font('Helvetica')
         .text(proposal.objective, {
           align: 'justify',
           lineGap: 2
         });
      
      doc.moveDown();

      // Key Features
      doc.fillColor('#1F2937')
         .fontSize(16)
         .font('Helvetica-Bold')
         .text('Key Features');
      
      doc.moveDown(0.3);
      proposal.features.forEach((feature, index) => {
        doc.fillColor('#4F46E5')
           .text('• ', { continued: true })
           .fillColor('#374151')
           .text(feature);
        
        if (index < proposal.features.length - 1) {
          doc.moveDown(0.2);
        }
      });

      doc.moveDown();

      // Target Audience
      doc.fillColor('#1F2937')
         .fontSize(16)
         .font('Helvetica-Bold')
         .text('Target Audience');
      
      doc.moveDown(0.3);
      doc.fillColor('#374151')
         .fontSize(11)
         .font('Helvetica')
         .text(proposal.targetAudience, {
           align: 'justify'
         });

      doc.moveDown();

      // Initial Considerations
      doc.fillColor('#1F2937')
         .fontSize(16)
         .font('Helvetica-Bold')
         .text('Initial Considerations');
      
      doc.moveDown(0.3);
      proposal.considerations.forEach((consideration, index) => {
        doc.fillColor('#4F46E5')
           .text('• ', { continued: true })
           .fillColor('#374151')
           .text(consideration);
        
        if (index < proposal.considerations.length - 1) {
          doc.moveDown(0.2);
        }
      });

      // Footer
      const pageHeight = doc.page.height;
      doc.y = pageHeight - 50;
      
      doc.strokeColor('#E5E7EB')
         .lineWidth(1)
         .moveTo(50, doc.y)
         .lineTo(550, doc.y)
         .stroke();
      
      doc.moveDown(0.5);
      doc.fillColor('#6B7280')
         .fontSize(8)
         .font('Helvetica-Oblique')
         .text('Generated by Project Scope Catalyst • ' + new Date().toLocaleDateString(), { 
           align: 'center' 
         });

      doc.end();
    } catch (error) {
      reject(error);
    }
  });
}